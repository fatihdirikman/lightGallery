<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/</link><description>Recent content in Docs on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:57 +0000</lastBuildDate><atom:link href="//sachinchoolur.github.io/lightGallery/v2/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Get started</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/getting-started/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>//sachinchoolur.github.io/lightGallery/v2/docs/getting-started/</guid><description>Core features Fully responsive. Modular architecture with built in plugins. Highly optimized for touch devices. Mouse drag supports for desktops. Double-click/Double-tap to see actual size of the image. Animated thumbnails. Social sharing. YouTube Vimeo Wistia and html5 videos Support. 20+ Hardware-Accelerated CSS3 transitions. Dynamic mode. Inline gallery Full screen support. Zoom in/out, Pinch to zoom. Swipe/Drag up/down support to close gallery Browser history API(deep linking). Responsive images. HTML iframe support.</description></item><item><title>Settings</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/settings/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>//sachinchoolur.github.io/lightGallery/v2/docs/settings/</guid><description>Passing settings lightGallery accepts two parameters, an HTML element as the first parameter and library settings as the second parameter. You need to pass settings only if you want to modify default behaviors
lightGallery(document.getElementById(&amp;#39;gallery-container&amp;#39;), { speed: 500, mode: &amp;#39;fade&amp;#39;, ...Other settings }); lightGallery core LightGallery comes with modular architecture. All the basic functionalities are available in the core module. You need to include plugins such if you need additional functionalities such as thumbnails, vide support, zoom, etc.</description></item><item><title>Events</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/events/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>//sachinchoolur.github.io/lightGallery/v2/docs/events/</guid><description>Usage example lightGallery custom events can be attached to the HTML element that you are using to initialize the gallery. Every custom event holds useful plugin data that can be used to control or customize lightGallery. Make sure that you attach event listeners before initializing lightGallery
const lg = document.getElementById(&amp;#39;custom-events-demo&amp;#39;); // Perform any action just before opening the gallery lg.addEventListener(&amp;#39;lgBeforeOpen&amp;#39;, () =&amp;gt; { alert(&amp;#39;onBeforeOpen&amp;#39;); }); // custom event with useful plugin data lg.</description></item><item><title>Methods</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/methods/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>//sachinchoolur.github.io/lightGallery/v2/docs/methods/</guid><description>Access plugin instance lightGallery plugin instance can be accessed in two ways, through the lightGallery function and through the lightGallery custom init event.
const lg = document.getElementById(&amp;#39;lg-method-demo&amp;#39;); // Get the plugin instance through the lightGallery main function const plugin = lightGallery(lg); // or get thought init event // let plugin = null; // lg.addEventListener(&amp;#39;lgInit&amp;#39;, (event) =&amp;gt; { // plugin = event.detail.instance; // }); // Go to third slide // Index starts from 0 plugin.</description></item><item><title>Dynamic variables</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/dynamic-variables/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>//sachinchoolur.github.io/lightGallery/v2/docs/dynamic-variables/</guid><description>Available options Name Description __slideVideoInfo alt alt attribute for the image disqusIdentifier Disqus page identifier Please refer official disqus documentation for more info disqusUrl Disqus page url Please refer official disqus documentation for more info downloadUrl Download url for your image/video. Pass false if you want to hide the download button.</description></item><item><title>Attributes</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/attributes/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>//sachinchoolur.github.io/lightGallery/v2/docs/attributes/</guid><description>Available options Name Description true alt alt attribute for the image data-disqus-identifier Disqus page identifier Please refer official disqus documentation for more info data-disqus-url Disqus page url Please refer official disqus documentation for more info data-download-url Download url for your image/video.</description></item><item><title>lightGallery React</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/react/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>//sachinchoolur.github.io/lightGallery/v2/docs/react/</guid><description>Installation Follow the below steps to use lightGallery react component in your application. React component is part of the main lightGallery package on NPM. You can import it using the following way
Install lightGallery via NPM npm install lightgallery Import react component and styles import LightGallery from &amp;#39;lightgallery/react&amp;#39;; // import styles import &amp;#39;lightgallery/css/lightgallery.css&amp;#39;; // import plugins if you need import lgThumbnail from &amp;#39;lightgallery/plugins/lg-thumbnail&amp;#39;; import lgZoom from &amp;#39;lightgallery/plugins/lg-zoom&amp;#39;; function Gallery() { const onInit = () =&amp;gt; { console.</description></item><item><title>lightGallery Vue</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/vue/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>//sachinchoolur.github.io/lightGallery/v2/docs/vue/</guid><description>Installation Follow the below steps to use lightGallery vue component in your application. Vue component is part of the main lightGallery package on NPM. You can import it using the following way
Install lightGallery via NPM npm install lightgallery Import vue component and styles &amp;lt;template&amp;gt; &amp;lt;lightgallery :settings=&amp;#34;{ speed: 500, plugins: plugins }&amp;#34; :onInit=&amp;#34;onInit&amp;#34; :onBeforeSlide=&amp;#34;onBeforeSlide&amp;#34; &amp;gt; &amp;lt;a href=&amp;#34;img/img1.jpg&amp;#34;&amp;gt; &amp;lt;img alt=&amp;#34;..&amp;#34; src=&amp;#34;img/thumb1.jpg&amp;#34; /&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;img/img2.jpg&amp;#34;&amp;gt; &amp;lt;img alt=&amp;#34;..&amp;#34; src=&amp;#34;img/thumb2.</description></item><item><title>lightGallery Angular</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/angular/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>//sachinchoolur.github.io/lightGallery/v2/docs/angular/</guid><description>Installation Follow the below steps to use lightGallery angular component in your application. Angular component is part of the main lightGallery package on NPM. You can import it using the following way
Install lightGallery via NPM npm install lightgallery Import lightGallery module import { LightgalleryModule } from &amp;#39;lightgallery/angular&amp;#39;; @NgModule({ imports: [LightgalleryModule], }) export class AppModule {} import styles in styles.scss @import &amp;#39;~lightgallery/css/lightgallery&amp;#39;; template &amp;lt;lightgallery [settings]=&amp;#34;settings&amp;#34; [onInit]=&amp;#34;onInit&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;img/img1.</description></item><item><title>lgQuery</title><link>//sachinchoolur.github.io/lightGallery/v2/docs/lg-query/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>//sachinchoolur.github.io/lightGallery/v2/docs/lg-query/</guid><description>Need create documentation</description></item></channel></rss>